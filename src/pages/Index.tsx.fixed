import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { ProductCard } from '@/components/ProductCard';
import { CheckoutFlow } from '@/components/CheckoutFlow';
import { OrderComplete } from '@/components/OrderComplete';
import { CartButton } from '@/components/CartButton';
import { ShopifyProductService } from '@/services/shopifyService';
import { useCart } from '@/hooks/useCart';
import { Product, CheckoutStep, CameraType, CameraLevel, ProductVariant } from '@/types/checkout';
import { Menu, X, ShoppingBag, User, Search, Heart, Minus, Plus, Trash2 } from 'lucide-react';

type AppState = 'camera-type' | 'camera-level' | 'products' | 'addons' | 'order-summary' | 'checkout' | 'complete';

interface CameraTypeOption {
  type: CameraType;
  title: string;
  description: string;
  icon: string;
}

interface CameraLevelOption {
  level: CameraLevel;
  title: string;
  description: string;
  features: string[];
}

const Index = () => {
  const [appState, setAppState] = useState<AppState>('camera-type');
  const { updateProductSelection, setAllAddOns, isLoading, error } = useCart();
  const [products, setProducts] = useState<Product[]>([]);
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
  const [loadingProducts, setLoadingProducts] = useState(true);
  const [checkoutSteps, setCheckoutSteps] = useState<CheckoutStep[]>([]);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [selectedCameraType, setSelectedCameraType] = useState<CameraType | null>(null);
  const [selectedCameraLevel, setSelectedCameraLevel] = useState<CameraLevel | null>(null);

  // Camera type options for the selection UI
  const cameraTypes: CameraTypeOption[] = [
    {
      type: 'residential',
      title: 'Residential',
      description: 'Perfect for home security and monitoring',
      icon: 'üè†'
    },
    {
      type: 'rural',
      title: 'Rural',
      description: 'Ideal for farm and countryside surveillance',
      icon: 'üåæ'
    },
    {
      type: 'industrial',
      title: 'Industrial',
      description: 'Heavy-duty cameras for commercial use',
      icon: 'üè≠'
    }
  ];

  const cameraLevels: CameraLevelOption[] = [
    {
      level: 'entry',
      title: 'Entry Level',
      description: 'Basic cameras for essential monitoring',
      features: ['1080p HD', 'Basic night vision', 'Motion detection']
    },
    {
      level: 'mid',
      title: 'Mid Range',
      description: 'Enhanced cameras with advanced features',
      features: ['4K Ultra HD', 'Advanced night vision', 'Smart detection', 'Weather resistant']
    },
    {
      level: 'high',
      title: 'High Range',
      description: 'Premium cameras with professional features',
      features: ['8K Ultra HD', 'AI-powered analytics', '360¬∞ coverage', 'Extreme weather proof']
    }
  ];

  useEffect(() => {
    const createCheckoutSteps = async () => {
      try {
        const steps: CheckoutStep[] = [
          {
            id: 1,
            title: 'Camera Type',
            description: 'Select your camera type',
            addOns: [],
            cameraType: null
          },
          {
            id: 2,
            title: 'Camera Level',
            description: 'Choose your camera range',
            addOns: [],
            cameraLevel: null
          },
          {
            id: 3,
            title: 'Camera Selection',
            description: 'Choose your camera from the collection',
            addOns: [],
            collectionId: null
          },
          {
            id: 4,
            title: 'Extras & Accessories',
            description: 'Add additional accessories and services',
            addOns: [],
            collectionId: null
          },
          {
            id: 5,
            title: 'Order Summary',
            description: 'Review your selections before checkout',
            addOns: [],
            collectionId: null
          }
        ];
        setCheckoutSteps(steps);
      } catch (error) {
        console.error('Error creating checkout steps:', error);
        setCheckoutSteps([]);
      }
    };

    createCheckoutSteps();
  }, []);

  const handleCameraTypeSelect = (cameraType: CameraType) => {
    setSelectedCameraType(cameraType);
    setAppState('camera-level');
  };

  const handleCameraLevelSelect = (cameraLevel: CameraLevel) => {
    setSelectedCameraLevel(cameraLevel);
    setAppState('products');
  };

  const handleQuantityChange = (productId: string, newQuantity: number) => {
    console.log(`Quantity changed for ${productId}: ${newQuantity}`);
  };

  const handleAddToCart = async (product: Product, variantId: string) => {
    if (updateProductSelection) {
      await updateProductSelection(product, variantId);
      setAppState('addons');
    }
  };

  const handleCartClick = () => {
    setAppState('checkout');
  };

  const closeMobileMenu = () => {
    setIsMobileMenuOpen(false);
  };

  const updateProduct = (product: Product, variantId: string) => {
    // Implementation for updating product
    console.log('Updating product:', product, 'with variant:', variantId);
  };

  // Render the appropriate view based on appState
  const renderContent = () => {
    switch (appState) {
      case 'camera-type':
        return (
          <div className="w-full h-full px-4 py-6 sm:py-12">
            <div className="w-full max-w-6xl mx-auto">
              <div className="text-center mb-8 sm:mb-12">
                <h2 className="text-2xl sm:text-4xl font-bold text-gray-900 mb-2 sm:mb-4">
                  Choose Your Camera Type
                </h2>
                <p className="text-base sm:text-xl text-gray-600 max-w-2xl mx-auto">
                  Select the camera type that best fits your security needs
                </p>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8">
                {cameraTypes.map((cameraType) => (
                  <div
                    key={cameraType.type}
                    className="bg-white rounded-lg shadow-md p-4 sm:p-6 cursor-pointer hover:shadow-lg transition-all duration-200 h-full flex flex-col"
                    onClick={() => handleCameraTypeSelect(cameraType.type)}
                  >
                    <div className="text-center flex-1 flex flex-col">
                      <div className="text-3xl sm:text-4xl mb-3 sm:mb-4">{cameraType.icon}</div>
                      <h3 className="text-lg sm:text-xl font-semibold text-gray-900 mb-2">
                        {cameraType.title}
                      </h3>
                      <p className="text-sm sm:text-base text-gray-600 mb-4 flex-1">
                        {cameraType.description}
                      </p>
                      <Button className="w-full mt-auto">
                        Select {cameraType.title}
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      case 'camera-level':
        return (
          <div className="container mx-auto px-4 py-12">
            <div className="max-w-4xl mx-auto">
              <div className="mb-8">
                <Button
                  variant="ghost"
                  onClick={() => {
                    setAppState('camera-type');
                    setSelectedCameraType(null);
                  }}
                  className="mb-4 text-gray-600 hover:text-gray-900"
                >
                  ‚Üê Back to Camera Type Selection
                </Button>
              </div>

              <div className="text-center mb-12">
                <h2 className="text-4xl font-bold text-gray-900 mb-4">
                  Choose Your Camera Range
                </h2>
                <p className="text-xl text-gray-600 max-w-2xl mx-auto">
                  Select the camera range that matches your requirements and budget
                </p>
              </div>

              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 sm:gap-6 lg:gap-8">
                {cameraLevels.map((cameraLevel) => (
                  <div
                    key={cameraLevel.level}
                    className="bg-white rounded-lg shadow-md p-4 sm:p-6 cursor-pointer hover:shadow-lg transition-all duration-200 h-full flex flex-col"
                    onClick={() => handleCameraLevelSelect(cameraLevel.level)}
                  >
                    <div className="text-center flex-1 flex flex-col">
                      <h3 className="text-lg sm:text-xl font-semibold text-gray-900 mb-2">
                        {cameraLevel.title}
                      </h3>
                      <p className="text-sm sm:text-base text-gray-600 mb-4">
                        {cameraLevel.description}
                      </p>
                      <div className="mb-4 flex-1">
                        <ul className="text-xs sm:text-sm text-gray-600 space-y-1">
                          {cameraLevel.features.map((feature, index) => (
                            <li key={index} className="flex items-start">
                              <span className="text-blue-500 mr-2 mt-1">‚úì</span>
                              <span className="text-left">{feature}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                      <Button className="w-full mt-auto">
                        Select {cameraLevel.title}
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        );

      // Add other cases for different app states
      default:
        return null;
    }
  };

  return (
    <div className="w-full h-full bg-white">
      {/* Hide Shopify's default header and other elements */}
      <style dangerouslySetInnerHTML={{
        __html: `
          /* Hide Shopify elements */
          .shopify-section-header, 
          header[class*="shopify"], 
          .header-wrapper, 
          [data-section-type="header"], 
          .shopify-header, 
          .site-header, 
          #shopify-header, 
          #header, 
          .announcement-bar, 
          [role="banner"],
          /* Hide footer elements */
          footer,
          .shopify-section-footer,
          [data-section-type="footer"],
          .site-footer {
            display: none !important;
          }
          
          /* Ensure full height for the app */
          html, body, #root {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow-x: hidden;
          }
          
          /* Make sure the app takes full width and height */
          body {
            min-height: 100vh;
            width: 100%;
          }
          
          /* Ensure iframe content is scrollable */
          iframe {
            width: 100%;
            height: 100%;
            border: none;
          }
        `
      }} />

      <main className="w-full h-full overflow-auto bg-blue-50">
        <div className="w-full h-full min-h-screen">
          {renderContent()}
        </div>
      </main>
    </div>
  );
};

export default Index;
